@page
@using ArcadeLauncher.Pages.Components;
@model IndexModel
@{
    ViewData["Title"] = "Arcade Machine Menu";

}

<div id="StartText" class="text-center font-text ">
    <div id="start-button" class="menu-color"> </div>
    <h2 style="font-size: 300%; position:absolute; transform: translateY(8px)">START</h2>

</div>

<div id="MenuText" class="text-center reveal">
    @(await Html.RenderComponentAsync<ButtonsComponent>(RenderMode.Server))
    </div>


</div> 

<script>

    const rAF = window.mozRequestAnimationFrame || window.requestAnimationFrame;

    var focusableElements = document.querySelectorAll(
        '.play-btn'
    );

    var current = 0;

    window.addEventListener('gamepadconnected', function (event) {
        console.log(event);
        removeActive();
        updateLoop();
    });

    function removeActive(){
        console.log("check");
        console.log(document.querySelectorAll(".active"));
        if (document.querySelectorAll(".active") > 0) {
            document.querySelectorAll(".reveal").classList.remove("active");
        }
        
    }

    function updateLoop() {
        const gamepad = navigator.getGamepads()[0];
        const xBoxButtonA = gamepad.buttons[0];
        const xBoxButtonB = gamepad.buttons[1];
        const xBoxButton1 = gamepad.buttons[2];
        const xBoxButton2 = gamepad.buttons[3];
        const xBoxButton3 = gamepad.buttons[4];
        const xBoxButton4 = gamepad.buttons[5];
        const xBoxButton5 = gamepad.buttons[6];
        const xBoxButton6 = gamepad.buttons[7];
        const xBoxButton7 = gamepad.buttons[8];
        const xBoxButton8 = gamepad.buttons[9];
        const xBoxButton9 = gamepad.buttons[10];
        // const xBoxButton10 = gamepad.buttons[11];
        // const xBoxButton11 = gamepad.buttons[12];
        // const xBoxButton12 = gamepad.buttons[13];
        // const xBoxButton13 = gamepad.buttons[14];
        const xBoxStickLeft = gamepad.axes[0];

        if (xBoxButtonB.pressed) { testConsole() }
        if (xBoxButtonA.pressed) { testLog(0) }
        if (xBoxButtonB.pressed) { testLog(1) }
        if (xBoxButton1.pressed) { testLog(2) }
        if (xBoxButton2.pressed) { testLog(3) }
        if (xBoxButton3.pressed) { testLog(4) }
        if (xBoxButton4.pressed) { testLog(5) }
        if (xBoxButton5.pressed) { testLog(6) }
        if (xBoxButton6.pressed) { testLog(7) }
        if (xBoxButton7.pressed) { testLog(8) }
        if (xBoxButton8.pressed) { testLog(9) }
        if (xBoxButton9.pressed) { testLog(10) }
        // if (xBoxButton10.pressed) { testLog(10) }
        // if (xBoxButton11.pressed) { testLog(11) }
        // if (xBoxButton12.pressed) { testLog(12) }
        // if (xBoxButton13.pressed) { testLog(13) }

        var timeout = 0;
        if (xBoxStickLeft < -0.1)
        { 
            timeout = 500;
            prevItem(current) 
        }
        if (xBoxStickLeft > 0.1) 
        {
            timeout = 500;
            nextItem(current) 
        }
        setTimeout(() => rAF(updateLoop), timeout);

        focusableElements = document.querySelectorAll(
            '.play-btn'
        );

        if (xBoxButton1.pressed) {
            document.querySelector("#StartText").classList.add("hidden");
            document.querySelector("#MenuText").classList.remove("hidden");
            scroller();
            console.log("test");
        }

    }

    function testConsole() {
        focusableElements[current].click();
        
    }

    function testLog(number) {
        console.log("Hallo" + number);
        console.log(focusableElements);
    }

    function nextItem(index) {
        current = (index + 1) % focusableElements.length;
        focusableElements[current].focus();
    }

    function prevItem(index) {
        current = (index - 1) % focusableElements.length;
        if (current < 0) {
            current = focusableElements.length - 1;
        }
        focusableElements[current].focus();
    }

</script>


