@using ArcadeLauncher.Models;
@using Microsoft.AspNetCore.Components.Web
@using ArcadeLauncher.Services;
@inject GameService gameservice;

@{
    GameInfo[] games = gameservice.GetAllManifests();

    Category[] categories = new Category[]
    {
        new Category
        {
            Name = "NEW",
            Selector = games.OrderBy(x => x.DateAdded)
        },
                new Category
        {
            Name = "FEATURED",
            Selector = games.Where(x => x.isTopPicked).OrderBy(x => x.DateAdded)
        },
        new Category
        {
            Name = "TEST",
            Selector = games.Where(x => x.isTopPicked).OrderBy(x => x.DateAdded)
        },
                new Category
        {
            Name = "A-Z",
            Selector = games.OrderBy(x => x.GameName)
        },
        new Category
        {
            Name = "Z-A",
            Selector = games.OrderByDescending(x => x.GameName)
        }
    };
}

<div id="games-catalogue">
    @foreach (Category category in categories)
    {
        if (!category.Selector.Any())
        {
            continue;
        }
        <div class="games-category category" id="@category.Name">
            <div id="cat-new-text" class="font-text big-text cat-text games-category-title">
                @category.Name
            </div>
            <div class="games-row">
                <div class="games-bc menu-color"></div>
                <div class="games-container">
                    @foreach (GameInfo game in category.Selector)
                    {

                        ObtainImage(game);
                        <button style="" class="play-btn inner" @onfocus="() => SetInfo(game)" @onclick="() => OpenExe(game)">
                            <div class="outer">
                                <div style="background-image: url(@imgSrc);filter: revert; --mainColor: @game.Manifest.BackgroundColor;">
                                </div>
                            </div>
                            <div class="play-border menu-color"></div>
                        </button>
                    }
                </div>
            </div>
        </div>
    }

    <!-- i am to lazy to fix weird scrolling, by appending 2 elements the problem goes away-->
    @for (int i = 0; i < 2; i++)
    {
        <div class="games-category no-opacity">
            <div id="cat-new-text" class="font-text big-text cat-text games-category-title">
            </div>
            <div class="games-row">
                <div class="games-bc menu-color"></div>
                <div class="games-container">
                </div>
            </div>
        </div>

    }

</div>


<div class="img-info-board info-padding menu-color">

    
    <div class="font-text" style="margin-top: -20px; opacity: @(isLaunching? 1:0)">
            <div class="big-text" style="border-bottom: solid 7px;">Launching...</div><!--!-->
        </div>

    <div class="smaller-text-space">
        <div class="font-text">
            <div class="big-text">@gameName</div>

            <div class="font-text mid-text">
                @gameDesc
            </div>
        </div>

    </div>

    <div id="playericons">
        @for (int i = 0; i < playersNeeded; i++)
        {
            <div></div>
        }
    </div>

    <div id="author-names">
        @if (gameMakers != null)
        {
            for (int i = 0; i < gameMakers.Length; i++)
            {

                <div class="font-text">
                    @gameMakers[i]
                </div>

            }
        }


    </div>
</div>
@code {
    private int currentCount = 0;

    private string gameDesc;
    private string gameName;
    private int playersNeeded;
    private string[] gameMakers;

    private string imageBase64;
    private string imgSrc = "";
    private bool isLaunching = false;
    private void OpenExe(GameInfo game)
    {
        isLaunching = gameservice.OpenExe(game, () =>
        {
            DelayedLaunchRemove();
        });
    }

    async Task DelayedLaunchRemove()
    {
        await Task.Delay(100);
        isLaunching = false;

        StateHasChanged();
    }

    private void SetInfo(GameInfo game)
    {
        gameDesc = game.Manifest.Description;
        gameName = game.Manifest.Name;
        playersNeeded = game.Manifest.PlayersNeeded;
        gameMakers = game.Manifest.Authors;
    }

    private void ObtainImage(GameInfo game)
    {
        imageBase64 = gameservice.ShowImage(game);

        imgSrc = String.Format("data:image/gif;base64,{0}", imageBase64);
    }
}
